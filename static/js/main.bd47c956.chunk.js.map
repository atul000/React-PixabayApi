{"version":3,"sources":["component/navbar/Navbar.js","component/image-result/ImageResult.js","component/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","title","ImageResult","state","open","currentImg","handleOpen","img","_this","setState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","className","class","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_result_ImageResult","App","MuiThemeProvider_default","navbar_Navbar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd47c956.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar';\n\nconst Navbar = () => {\n  return (\n    <div>\n      <AppBar title=\"PixaBay Image Finder\" />\n    </div>\n  )\n}\nexport default Navbar;\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList';\nimport IconButton from 'material-ui/IconButton';\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\nimport Dialog from 'material-ui/Dialog';\nimport FlatButton from 'material-ui/FlatButton';\n\n\n class ImageResult extends Component {\n\n    state = {\n        open: false,\n        currentImg:''\n    }\n\n    handleOpen = img => {\n        this.setState({ open: true, currentImg: img })\n    }\n\n    handleClose = img => {\n        this.setState({ open: false })\n    }\n\n  render() {\n\n    let imageListContent;\n    const {images} = this.props;\n\n    if(images){\n        imageListContent = (\n            <GridList cols={3}>\n                {images.map(img => (\n                    <GridTile\n                    title={img.tags}\n                        key={img.id}\n                        subtitle={\n                            <span>\n                                by <strong>{img.user}</strong>\n                            </span>\n                        }\n                        actionIcon={\n                            <IconButton onClick={ () => this.handleOpen(img.largeImageURL)}>\n                                <ZoomIn color=\"white\"/>\n                            </IconButton>\n                        }\n                    >\n                    <img src={img.largeImageURL} alt=\"\"/>\n                        \n                    </GridTile>\n                ))}\n            </GridList>\n        )\n    }else{\n        imageListContent = null;\n    }\n\n    const actions = [\n        <FlatButton label=\"Close\" primary={true} onClick={this.handleClose}/>\n    ]\n\n    return (\n      <div>\n        {imageListContent}\n        <Dialog\n        actions={actions}\n        modal={false}\n        open={this.state.open}\n        onRequestClose={this.handleClose}\n        >\n        <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }}/>\n\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nImageResult.propTypes = {\n    images: PropTypes.array.isRequired\n}\n\nexport default ImageResult;\n\n","import React, { Component } from 'react'\nimport TextField from 'material-ui/TextField';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios';\nimport ImageResult from '../image-result/ImageResult'\n\n\n\n class Search extends Component {\n\n    state = {\n        searchText: \"\",\n        amount: 10,\n        apiUrl: \"https://pixabay.com/api\",\n        apiKey: \"8763506-ba60fe5b04914e38432780280\",\n        images: []\n    };\n\n    // onTextChange = (e) => {\n    //     this.setState({ [e.target.name]: e.target.value }, () => {\n    //         axios\n    //             .get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&\n    //             per_page=${this.state.amount}&safesearch=true`)\n    //             .then(res => this.setState({ images: res.data.hits }))\n    //             .catch(err => console.log(err))\n    //     });\n    // };\n\n    onTextChange = e => {\n        const val = e.target.value;\n        this.setState({ [e.target.name]: val }, () => {\n          if (val === '') {\n            this.setState({ images: [] });\n          } else {\n            axios\n              .get(\n                `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\n                  this.state.searchText\n                }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\n              )\n              .then(res => this.setState({ images: res.data.hits }))\n              .catch(err => console.log(err));\n          }\n        });\n      };\n\n    onAmountChange = (e, index, value) => this.setState({ amount: value });\n\n\n\n  render() {\n      console.log(this.state.images)\n    return (\n      <div  className=\"App\">\n      Made with <i class=\"fas fa-heart fa-2x\"></i> by <b>Atul</b>\n        <TextField\n        name=\"searchText\"\n        value={this.state.searchText}\n        onChange={this.onTextChange}\n        floatingLabelText=\"Search for Images\"\n        fullWidth={true}\n        />\n        <br/>\n\n        <SelectField\n          name=\"amount\"\n          floatingLabelText=\"Amount\"\n          value={this.state.amount}\n          onChange={this.onAmountChange}\n        >\n          <MenuItem value={5} primaryText=\"5\" />\n          <MenuItem value={10} primaryText=\"10\" />\n          <MenuItem value={15} primaryText=\"15\" />\n          <MenuItem value={30} primaryText=\"30\" />\n          <MenuItem value={50} primaryText=\"50\" />\n        </SelectField>\n        <br/>\n        {this.state.images.length > 0 ? (<ImageResult images={this.state.images} />) : null}\n\n        \n\n      </div>\n    )\n  }\n}\n\nexport default Search;\n","import React from 'react';\nimport Navbar from './component/navbar/Navbar';\nimport Search from './component/search/Search';\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n    <div>\n\n      <Navbar/><br/>\n      <Search/>\n    </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './src/App';\n// import * as serviceWorker from './src/serviceWorker';\n// import '../node_modules/font-awesome/css/font-awesome.min.css'; \n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// serviceWorker.unregister();\n\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n\n"],"sourceRoot":""}